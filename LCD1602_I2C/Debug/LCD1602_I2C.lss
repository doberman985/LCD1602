
LCD1602_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000016a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c9  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a6  00000000  00000000  00000a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ff  00000000  00000000  00000fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036d  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  00001805  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001a82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a1 36       	cpi	r26, 0x61	; 97
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	55 d0       	rcall	.+170    	; 0xea <main>
  40:	58 c0       	rjmp	.+176    	; 0xf2 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <i2c_start_callback>:
		{
			i2c_stop_callback();
		}
		n++;
	}
}
  44:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  48:	81 60       	ori	r24, 0x01	; 1
  4a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  4e:	d0 9a       	sbi	0x1a, 0	; 26
  50:	d8 98       	cbi	0x1b, 0	; 27
  52:	89 e1       	ldi	r24, 0x19	; 25
  54:	8a 95       	dec	r24
  56:	f1 f7       	brne	.-4      	; 0x54 <i2c_start_callback+0x10>
  58:	00 00       	nop
  5a:	d1 9a       	sbi	0x1a, 1	; 26
  5c:	d9 98       	cbi	0x1b, 1	; 27
  5e:	85 e1       	ldi	r24, 0x15	; 21
  60:	8a 95       	dec	r24
  62:	f1 f7       	brne	.-4      	; 0x60 <i2c_start_callback+0x1c>
  64:	00 00       	nop
  66:	08 95       	ret

00000068 <i2c_stop_callback>:
  68:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  6c:	8e 7f       	andi	r24, 0xFE	; 254
  6e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  72:	d1 98       	cbi	0x1a, 1	; 26
  74:	d9 9a       	sbi	0x1b, 1	; 27
  76:	85 e1       	ldi	r24, 0x15	; 21
  78:	8a 95       	dec	r24
  7a:	f1 f7       	brne	.-4      	; 0x78 <i2c_stop_callback+0x10>
  7c:	00 00       	nop
  7e:	d0 98       	cbi	0x1a, 0	; 26
  80:	d8 9a       	sbi	0x1b, 0	; 27
  82:	89 e1       	ldi	r24, 0x19	; 25
  84:	8a 95       	dec	r24
  86:	f1 f7       	brne	.-4      	; 0x84 <i2c_stop_callback+0x1c>
  88:	00 00       	nop
  8a:	08 95       	ret

0000008c <i2c_send_byte>:
  8c:	9c 01       	movw	r18, r24
  8e:	98 e0       	ldi	r25, 0x08	; 8
  90:	27 ff       	sbrs	r18, 7
  92:	04 c0       	rjmp	.+8      	; 0x9c <i2c_send_byte+0x10>
  94:	d9 9a       	sbi	0x1b, 1	; 27
  96:	d8 9a       	sbi	0x1b, 0	; 27
  98:	d9 98       	cbi	0x1b, 1	; 27
  9a:	03 c0       	rjmp	.+6      	; 0xa2 <i2c_send_byte+0x16>
  9c:	d9 9a       	sbi	0x1b, 1	; 27
  9e:	d8 98       	cbi	0x1b, 0	; 27
  a0:	d9 98       	cbi	0x1b, 1	; 27
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	91 50       	subi	r25, 0x01	; 1
  a8:	99 f7       	brne	.-26     	; 0x90 <i2c_send_byte+0x4>
  aa:	08 95       	ret

000000ac <i2c_set_adress>:
  ac:	8e e4       	ldi	r24, 0x4E	; 78
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	ed df       	rcall	.-38     	; 0x8c <i2c_send_byte>
  b2:	08 95       	ret

000000b4 <i2c_recive_ack>:
  b4:	d0 98       	cbi	0x1a, 0	; 26
  b6:	d9 9a       	sbi	0x1b, 1	; 27
  b8:	c8 99       	sbic	0x19, 0	; 25
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <i2c_recive_ack+0x10>
  bc:	d9 98       	cbi	0x1b, 1	; 27
  be:	d0 9a       	sbi	0x1a, 0	; 26
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	08 95       	ret
  c4:	d9 98       	cbi	0x1b, 1	; 27
  c6:	d0 9a       	sbi	0x1a, 0	; 26
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	08 95       	ret

000000cc <i2c_send>:

void i2c_send(int data)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
	i2c_start_callback();
  d2:	b8 df       	rcall	.-144    	; 0x44 <i2c_start_callback>
	i2c_set_adress();
  d4:	eb df       	rcall	.-42     	; 0xac <i2c_set_adress>
	if(i2c_recive_ack())
  d6:	ee df       	rcall	.-36     	; 0xb4 <i2c_recive_ack>
  d8:	88 23       	and	r24, r24
  da:	19 f0       	breq	.+6      	; 0xe2 <i2c_send+0x16>
	{
		i2c_send_byte(data);
  dc:	ce 01       	movw	r24, r28
  de:	d6 df       	rcall	.-84     	; 0x8c <i2c_send_byte>
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <i2c_send+0x18>
	}
	else
	{
		i2c_stop_callback();
  e2:	c2 df       	rcall	.-124    	; 0x68 <i2c_stop_callback>
	}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <main>:
int main(void)
{
	
    while (1) 
    {
		i2c_send(2);
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	ee df       	rcall	.-36     	; 0xcc <i2c_send>
  f0:	fc cf       	rjmp	.-8      	; 0xea <main>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
